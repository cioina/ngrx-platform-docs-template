{
  "id": "guide/entity/recipes/additional-state-properties",
  "title": "Additional Entity State Properties Update",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/NODEJS/ngrx.io/content/guide/entity/recipes/additional-state-properties.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"additional-entity-state-properties-update\">Additional Entity State Properties Update<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entity/recipes/additional-state-properties#additional-entity-state-properties-update\"><i class=\"material-icons\">link</i></a></h1>\n<p>It's possible to add extra properties to a <code>State</code> extending from <code>EntityState</code>. These properties must be updated manually. Just like in a non-entity state, we can update the added properties in the reducer. This can be done with or without using the <code>@ngrx/entity</code> helper functions.</p>\n<p>The steps below show you how to extend the <a href=\"https://ngrx.io/guide/entity/adapter\">Entity Adapter</a> example.</p>\n<p>Usage:</p>\n<p>Declare the <code>selectedUserId</code> as an additional property in the interface.</p>\n<code-example header=\"user.reducer.ts\">\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nexport interface User {\n  id: string;\n  name: string;\n}\n\nexport interface State extends EntityState&#x3C;User> {\n  // additional state property\n  selectedUserId: number;\n}\n\nexport const adapter: EntityAdapter&#x3C;User> = createEntityAdapter&#x3C;User>();\n</code-example>\n<p>Then create an action to update the <code>selectedUserId</code></p>\n<code-example header=\"user.actions.ts\">\nimport { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { User } from '../models/user.model';\n\nexport const selectUser = createAction('[Users Page] Select User', props&#x3C;{ userId: string }>());\nexport const loadUsers = createAction('[User/API] Load Users', props&#x3C;{ users: User[] }>());\n</code-example>\n<p>The entity adapter is only used to update the <code>EntityState</code> properties. The additional state properties should be updated same as normal state properties, as the example below.</p>\n<code-example header=\"user.reducer.ts\">\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Action, createReducer, on } from '@ngrx/store';\nimport { User } from '../models/user.model';\nimport * as UserActions from '../actions/user.actions';\n\nexport interface State extends EntityState&#x3C;User> {\n  // additional state property\n  selectedUserId: number | null;\n}\n\nexport const adapter: EntityAdapter&#x3C;User> = createEntityAdapter&#x3C;User>();\n\nexport const initialState: State = adapter.getInitialState({\n  // additional entity state properties\n  selectedUserId: null,\n});\n\nexport const userReducer = createReducer(\n  initialState,\n  on(UserActions.selectUser, (state, { userId }) => {\n    return { ...state, selectedUserId: userId };\n  }),\n  on(UserActions.loadUsers, (state, { users }) => {\n    return adapter.addMany(users, { ...state, selectedUserId: null });\n  })\n);\n\nexport function reducer(state: State | undefined, action: Action) {\n  return userReducer(state, action);\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - guide/entity/recipes/additional-state-properties#additional-entity-state-properties-update\n - https://github.com/ngrx/platform/edit/master/NODEJS/ngrx.io/content/guide/entity/recipes/additional-state-properties.md?message=docs%3A%20describe%20your%20change...\n - https://ngrx.io/guide/entity/adapter\n-->"
}