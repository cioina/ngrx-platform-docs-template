{
  "id": "guide/migration/v8",
  "title": "V8 Update Guide",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/NODEJS/ngrx.io/content/guide/migration/v8.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"v8-update-guide\">V8 Update Guide<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#v8-update-guide\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"angular-cli-update\">Angular CLI update<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#angular-cli-update\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgRx supports using the Angular CLI <code>ng update</code> command to update your dependencies. Migration schematics are run to make the upgrade smoother. These schematics will fix breaking changes.</p>\n<p>To update your packages to the latest released version, run the command below.</p>\n<code-example language=\"sh\">\nng update @ngrx/store\n</code-example>\n<h2 id=\"dependencies\">Dependencies<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#dependencies\"><i class=\"material-icons\">link</i></a></h2>\n<p>V8 has the minimum version requirements:</p>\n<ul>\n<li>Angular version 8.x</li>\n<li>Angular CLI version 8.0.2</li>\n<li>TypeScript version 3.4.x</li>\n<li>RxJS version 6.4.0</li>\n</ul>\n<h2 id=\"breaking-changes\">Breaking changes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#breaking-changes\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"ngrxstore\">@ngrx/store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#ngrxstore\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"meta_reducers-token\"><code>META_REDUCERS</code> token<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#meta_reducers-token\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"alert is-helpful\">\n<p>A migration is provided to rename the <code>META_REDUCERS</code> token to <code>USER_PROVIDED_META_REDUCERS</code></p>\n</div>\n<p>The <code>META_REDUCERS</code> token has been renamed to <code>USER_PROVIDED_META_REDUCERS</code>.</p>\n<p>The <code>META_REDUCERS</code> token has become a multi token and can be used by\nlibrary authors.</p>\n<h4 id=\"selectors-with-only-a-projector-function-arent-valid-anymore\">Selectors with only a projector function aren't valid anymore<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#selectors-with-only-a-projector-function-arent-valid-anymore\"><i class=\"material-icons\">link</i></a></h4>\n<p>This change will make the usage of selectors more consistent.</p>\n<p>BEFORE:</p>\n<code-example language=\"ts\">\nconst getTodosById = createSelector(\n  (state: TodoAppSchema, id: number) => state.todos.find(p => p.id === id)\n);\n</code-example>\n<p>AFTER:</p>\n<code-example language=\"ts\">\nconst getTodosById = createSelector(\n  (state: TodoAppSchema) => state.todos,\n  (todos: Todo[], id: number) => todos.find(p => p.id === id)\n);\n</code-example>\n<h4 id=\"memoizedselector-enforces-the-return-type-to-strictly-match-the-second-generic-type\">MemoizedSelector enforces the return type to strictly match the second generic type.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#memoizedselector-enforces-the-return-type-to-strictly-match-the-second-generic-type\"><i class=\"material-icons\">link</i></a></h4>\n<p>For example, prior to 8.0.0 the following would be fine, since the return type <code>boolean</code> is widened to <code>boolean | null</code>.</p>\n<p> BEFORE:</p>\n<code-example language=\"ts\">\nexport const getLoginPagePending: MemoizedSelector&#x3C;State, boolean | null> = createSelector(\n selectLoginPageState,\n loginState => loginState.pending // boolean\n);\n</code-example>\n<p>Now this will produce an error:</p>\n<code-example language=\"txt\">\n error TS2322: Type 'MemoizedSelector&#x3C;State, boolean>' is not assignable to type 'MemoizedSelector&#x3C;State, boolean | null>'.\n  Types of property 'setResult' are incompatible.\n    Type '(result?: boolean | undefined) => void' is not assignable to type '(result?: boolean | null | undefined) => void'.\n      Types of parameters 'result' and 'result' are incompatible.\n        Type 'boolean | null | undefined' is not assignable to type 'boolean | undefined'.\n          Type 'null' is not assignable to type 'boolean | undefined'.\n</code-example>\n<p> Fix would be to specify the type correctly.</p>\n<p> AFTER:</p>\n<code-example language=\"ts\">\nexport const getLoginPagePending: MemoizedSelector&#x3C;State, boolean> = createSelector(\n selectLoginPageState,\n loginState => loginState.pending // boolean\n);\n</code-example>\n<p>Another interesting case is when object literals are returned, e.g.</p>\n<p>BEFORE:</p>\n<code-example language=\"ts\">\ninterface Reaction {\n  happy: boolean;\n  tweet: string;\n}\n export const getNews: MemoizedSelector&#x3C;State, Reaction> = createSelector(\n  newsState,\n  (news) => {\n    if (news.isFake) {\n      return {\n        happy: false,\n        tweet: 'blah blah blah',\n      }\n    }\n    return {\n      happy: true,\n      tweet: 'anyway',\n    }\n  }\n);\n</code-example>\n<p>Now the error message would happen (and it is a bit cryptic):</p>\n<code-example language=\"txt\">\nType 'MemoizedSelector&#x3C;State, { happy: false; tweet: string; } | { happy: true; tweet: string; }>' is not assignable to type 'MemoizedSelector&#x3C;State, Reaction>'.\n  Type 'Reaction' is not assignable to type '{ happy: false; tweet: string; } | { happy: true; tweet: string; }'.\n    Type 'Reaction' is not assignable to type '{ happy: true; tweet: string; }'.\n      Types of property 'happy' are incompatible.\n        Type 'boolean' is not assignable to type 'true'.ts(2322)\n</code-example>\n<p>Fix would be to add the return type to the <code>projector</code> function</p>\n<p>AFTER:</p>\n<code-example language=\"ts\">\nexport const getNews: MemoizedSelector&#x3C;State, Reaction> = createSelector(\n  newsState,\n  (news): Reaction => {\n    if (news.isFake) {\n      return {\n        happy: false,\n        tweet: 'blah blah blah',\n      }\n    }\n    return {\n      happy: true,\n      tweet: 'anyway',\n    }\n  }\n);\n</code-example>\n<h4 id=\"return-type-of-createselectorfactory-and-createselector\">Return type of <code>createSelectorFactory</code> and <code>createSelector</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#return-type-of-createselectorfactory-and-createselector\"><i class=\"material-icons\">link</i></a></h4>\n<p>The return type of the <code>createSelectorFactory</code> and <code>createSelector</code> functions are now a <code>MemoizedSelector</code> instead of a <code>Selector</code>.</p>\n<h4 id=\"deprecation-of-ngrx-store-freeze\">Deprecation of ngrx-store-freeze<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#deprecation-of-ngrx-store-freeze\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"alert is-helpful\">\n<p>A migration is provided to remove the usage <code>ngrx-store-freeze</code>, remove it from the <code>package.json</code>, and to enable the built-in runtime checks <code>strictStateImmutability</code> and <code>strictActionImmutability</code>.</p>\n</div>\n<p>With the new built-in runtime checks, the usage of the <code>ngrx-store-freeze</code> package has become obsolete.</p>\n<h3 id=\"ngrxeffects\">@ngrx/effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#ngrxeffects\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"resubscribe-on-errors\">Resubscribe on Errors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#resubscribe-on-errors\"><i class=\"material-icons\">link</i></a></h4>\n<p>If an error occurs (or is flattened) in the main effect's pipe then it will be\nreported and the effect is resubscribed automatically. In cases when this new behavior is\nundesirable, it can be disabled using <code>{resubscribeOnError: false}</code> within the effect metadata\n(for each effect individually). <a href=\"/guide/effects/lifecycle#resubscribe-on-error\">Learn more</a>.</p>\n<p>BEFORE:</p>\n<code-example language=\"ts\">\nlogin$ = createEffect(() =>\n  this.actions$.pipe(\n    ofType(LoginPageActions.login),\n    exhaustMap(action =>\n      this.authService.login(action.credentials).pipe(\n        map(user => AuthApiActions.loginSuccess({ user })),\n        catchError(error => of(AuthApiActions.loginFailure({ error })))\n      )\n    )\n  )\n);\n</code-example>\n<p>AFTER:</p>\n<code-example language=\"ts\">\nlogins$ = createEffect(\n  () =>\n    this.actions$.pipe(\n      ofType(LoginPageActions.login),\n      exhaustMap(action =>\n        this.authService.login(action.credentials).pipe(\n          map(user => AuthApiActions.loginSuccess({ user })),\n          catchError(error => of(AuthApiActions.loginFailure({ error })))\n        )\n      )\n    ),\n  { resubscribeOnError: false }\n);\n</code-example>\n<h3 id=\"ngrxrouter-store\">@ngrx/router-store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#ngrxrouter-store\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"required-usage-of-forroot\">Required usage of <code>forRoot</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#required-usage-of-forroot\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"alert is-helpful\">\n<p>A migration is provided and will append <code>forRoot</code> to <code>StoreRouterConnectingModule</code></p>\n</div>\n<p>Usage of <code>forRoot</code> is now required for <code>StoreRouterConnectingModule</code></p>\n<p>BEFORE:</p>\n<code-example language=\"ts\">\n@NgModule({\n  imports: [\n    StoreRouterConnectingModule\n  ]\n})\nexport class AppModule {}\n</code-example>\n<p>AFTER:</p>\n<code-example language=\"ts\">\n@NgModule({\n  imports: [\n    StoreRouterConnectingModule.forRoot()\n  ]\n})\nexport class AppModule {}\n</code-example>\n<h3 id=\"ngrxentity\">@ngrx/entity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#ngrxentity\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"add-undefined-to-dictionarys-index-signature\">add undefined to Dictionary's index signature<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#add-undefined-to-dictionarys-index-signature\"><i class=\"material-icons\">link</i></a></h4>\n<p><code>Dictionary</code> and <code>DictionaryNum</code> could be producing <code>undefined</code> but previous typings were not explicit about it.</p>\n<h3 id=\"ngrxstore-devtools\">@ngrx/store-devtools<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#ngrxstore-devtools\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"actionswhitelist-is-renamed-to-actionssafelist\"><code>actionsWhitelist</code> is renamed to <code>actionsSafelist</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#actionswhitelist-is-renamed-to-actionssafelist\"><i class=\"material-icons\">link</i></a></h4>\n<p>BEFORE:</p>\n<code-example language=\"ts\">\nStoreDevtoolsModule.instrument({\n  actionsWhitelist: ['...'],\n})\n</code-example>\n<p>AFTER:</p>\n<code-example language=\"ts\">\nStoreDevtoolsModule.instrument({\n  actionsSafelist: ['...'],\n})\n</code-example>\n<h4 id=\"actionsblacklist-is-renamed-to-actionsblocklist\"><code>actionsBlacklist</code> is renamed to <code>actionsBlocklist</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#actionsblacklist-is-renamed-to-actionsblocklist\"><i class=\"material-icons\">link</i></a></h4>\n<p>BEFORE:</p>\n<code-example language=\"ts\">\nStoreDevtoolsModule.instrument({\n  actionsBlacklist: ['...']\n})\n</code-example>\n<p>AFTER:</p>\n<code-example language=\"ts\">\nStoreDevtoolsModule.instrument({\n  actionsBlocklist: ['...']\n})\n</code-example>\n<h2 id=\"ngrxdata\">@ngrx/data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#ngrxdata\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"renames\">Renames<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v8#renames\"><i class=\"material-icons\">link</i></a></h3>\n<p>To stay consistent with the other <code>@ngrx/*</code> packages, the following has been renamed:</p>\n<ul>\n<li><code>NgrxDataModule</code> is renamed to <code>EntityDataModule</code></li>\n<li><code>NgrxDataModuleWithoutEffects</code> is renamed to <code>EntityDataModuleWithoutEffects</code></li>\n<li><code>NgrxDataModuleConfig</code> is renamed to <code>EntityDataModuleConfig</code></li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>The installation of <code>@ngrx/data</code> package via <code>ng add @ngrx/data</code> will remove <code>ngrx-data</code> from the <code>package.json</code> and will also perform these renames.</p>\n</div>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/effects/lifecycle#resubscribe-on-error\n - guide/migration/v8#actionsblacklist-is-renamed-to-actionsblocklist\n - guide/migration/v8#actionswhitelist-is-renamed-to-actionssafelist\n - guide/migration/v8#add-undefined-to-dictionarys-index-signature\n - guide/migration/v8#angular-cli-update\n - guide/migration/v8#breaking-changes\n - guide/migration/v8#dependencies\n - guide/migration/v8#deprecation-of-ngrx-store-freeze\n - guide/migration/v8#memoizedselector-enforces-the-return-type-to-strictly-match-the-second-generic-type\n - guide/migration/v8#meta_reducers-token\n - guide/migration/v8#ngrxdata\n - guide/migration/v8#ngrxeffects\n - guide/migration/v8#ngrxentity\n - guide/migration/v8#ngrxrouter-store\n - guide/migration/v8#ngrxstore\n - guide/migration/v8#ngrxstore-devtools\n - guide/migration/v8#renames\n - guide/migration/v8#required-usage-of-forroot\n - guide/migration/v8#resubscribe-on-errors\n - guide/migration/v8#return-type-of-createselectorfactory-and-createselector\n - guide/migration/v8#selectors-with-only-a-projector-function-arent-valid-anymore\n - guide/migration/v8#v8-update-guide\n - https://github.com/ngrx/platform/edit/master/NODEJS/ngrx.io/content/guide/migration/v8.md?message=docs%3A%20describe%20your%20change...\n-->"
}