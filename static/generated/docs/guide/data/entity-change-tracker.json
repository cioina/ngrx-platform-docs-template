{
  "id": "guide/data/entity-change-tracker",
  "title": "EntityChangeTracker",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com//edit/master/NODEJS/ngrx.io/content/guide/data/entity-change-tracker.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"entitychangetracker\">EntityChangeTracker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#entitychangetracker\"><i class=\"material-icons\">link</i></a></h1>\n<p>NgRx Data tracks entity changes that haven't yet been saved on the server.\nIt also preserves \"original values\" for these changes and you can revert them with <em>undo actions</em>.</p>\n<p>Change-tracking and <em>undo</em> are important for applications that make <em>optimistic saves</em>.</p>\n<h2 id=\"optimistic-versus-pessimistic-save\">Optimistic versus Pessimistic save<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#optimistic-versus-pessimistic-save\"><i class=\"material-icons\">link</i></a></h2>\n<p>An <em>optimistic save</em> stores a new or changed entity in the cache <em>before making a save request to the server</em>.\nIt also removes an entity from the store <em>before making a delete request to the server</em>.</p>\n<div class=\"alert is-helpful\">\n<p>The <code>EntityActions</code> whose operation names end in <code>_OPTIMISTIC</code> start an <em>optimistic</em> save.</p>\n</div>\n<p>Many apps are easier to build when saves are \"optimistic\" because\nthe changes are immediately available to application code that is watching collection selectors.\nThe app doesn't have to wait for confirmation that the entity operation succeeded on the server.</p>\n<p>A <em>pessimistic save</em> doesn't update the store until the server until the server confirms that the save succeeded,\nwhich NgRx Data then turns into a \"SUCCESS\" action that updates the collection.\nWith a <em>pessimistic</em> save, the changes won't be available in the store</p>\n<p>This confirmation cycle can (and usually will) take significant time and the app has to account for that gap somehow.\nThe app could \"freeze\" the UX (perhaps with a modal spinner and navigation guards) until the confirmation cycle completes.\nThat's tricky code to write and race conditions are inevitable.\nAnd it's difficult to hide this gap from the user and keep the user experience responsive.</p>\n<p>This isn't a problem with optimistic saves because the changed data are immediately available in the store.</p>\n<div class=\"alert is-helpful\">\n<p>The developer always has the option to wait for confirmation of an optimistic save.\nBut the changed entity data will be in the store during that wait.</p>\n</div>\n<h3 id=\"save-errors\">Save errors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#save-errors\"><i class=\"material-icons\">link</i></a></h3>\n<p>The downside of optimistic save is that <em>the save could fail</em> for many reasons including lost connection,\ntimeout, or rejection by the server.</p>\n<p>When the client or server rejects the save request,\nthe <em>nrgx</em> <code>EntityEffect.persist$</code> dispatches an error action ending in <code>_ERROR</code>.</p>\n<p><strong>The default entity reducer methods do nothing with save errors.</strong></p>\n<p>There is no issue if the operation was <em>pessimistic</em>.\nThe collection had not been updated so there is no obvious inconsistency between the state\nof the entity in the collection and on the server.</p>\n<p>It the operation was <em>optimistic</em>, the entity in the cached collection has been added, removed, or updated.\nThe entity and the collection are no longer consistent with the state on the server.</p>\n<p>That may be a problem for your application.\nIf the save fails, the entity in cache no longer accurately reflects the state of the entity on the server.\nWhile that can happen for other reasons (e.g., a different user changed the same data),\nwhen you get a save error, you're almost certainly out-of-sync and should be able to do something about it.</p>\n<p>Change tracking gives the developer the option to respond to a server error\nby dispatching an <em>undo action</em> for the entity (or entities) and\nthereby reverting the entity (or entities) to the last known server state.</p>\n<p><em>Undo</em> is NOT automatic.\nYou may have other save error recovery strategies that preserve the user's\nunsaved changes.\nIt is up to you if and when to dispatch one of the <code>UNDO_...</code> actions.</p>\n<h2 id=\"change-tracking\">Change Tracking<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#change-tracking\"><i class=\"material-icons\">link</i></a></h2>\n<p>The NgRx Data tracks an entity's change-state in the collection's <code>changeState</code> property.</p>\n<p>When change tracking is enabled (the default), the <code>changeState</code> is a <em>primary key to</em> <code>changeState</code> <em>map</em>.</p>\n<div class=\"alert is-helpful\">\n<p>You can disable change tracking for an individual action or the collection as a whole as\ndescribed <a href=\"guide/data/entity-change-tracker#enable-change-tracking\">below</a>.</p>\n</div>\n<h3 id=\"changestate\"><em>ChangeState</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#changestate\"><i class=\"material-icons\">link</i></a></h3>\n<p>A <code>changeState</code> map adheres to the following interface</p>\n<code-example header=\"ChangeState\" linenums=\"false\">\nexport interface ChangeState&#x3C;T> {\n  changeType: ChangeType;\n  originalValue: T | undefined;\n}\n\nexport enum ChangeType {\n  Unchanged, // the entity has not been changed.\n  Added,     // the entity was added to the collection\n  Updated,   // the entity in the collection was updated\n  Deleted,   // the entity is scheduled for delete and was removed from collection.\n}\n</code-example>\n<p>A <em>ChangeState</em> describes an entity that changed since its last known server value.\nThe <code>changeType</code> property tells you how it changed.</p>\n<div class=\"alert is-helpful\">\n<p><code>Unchanged</code> is an <em>implied</em> state.\nOnly changed entities are recorded in the collection's <code>changeState</code> property.\nIf an entity's key is not present, assume it is <code>Unchanged</code> and has not changed since it was last\nretrieved from or successfully saved to the server.</p>\n</div>\n<p>The <em>original value</em> is the last known value from the server.\nThe <code>changeState</code> object holds an entity's <em>original value</em> for <em>two</em> of these states: <em>Updated</em> and <em>Deleted</em>.\nFor an <em>Unchanged</em> entity, the current value is the original value so there is no need to duplicate it.\nThere could be no original value for an entity this is added to the collection but no yet saved.</p>\n<h2 id=\"entityactions-and-change-tracking\">EntityActions and change tracking.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#entityactions-and-change-tracking\"><i class=\"material-icons\">link</i></a></h2>\n<p>The collection is created with an empty <code>changeState</code> map.</p>\n<h3 id=\"recording-a-change-state\">Recording a change state<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#recording-a-change-state\"><i class=\"material-icons\">link</i></a></h3>\n<p>Many <em>EntityOp</em> reducer methods will record an entity's change state.\nOnce an entity is recorded in the <code>changeState</code>, its <code>changeType</code> and <code>originalValue</code> generally do not change.\nOnce \"added\", \"deleted\" or \"updated\", an entity stays\nthat way until committed or undone.</p>\n<p>Delete (remove) is a special case with special rules.\n<a href=\"guide/data/entity-change-tracker#delete\">See below</a>.</p>\n<p>Here are the most important <code>EntityOps</code> that record an entity in the <code>changeState</code> map:</p>\n<code-example linenums=\"false\">\n// Optimistic save operations\nSAVE_ADD_ONE_OPTIMISTIC\nSAVE_DELETE_ONE_OPTIMISTIC\nSAVE_UPDATE_ONE_OPTIMISTIC\n\n// Cache operations\nADD_ONE\nADD_MANY\nREMOVE_ONE\nREMOVE_MANY\nUPDATE_ONE\nUPDATE_MANY\nUPSERT_ONE\nUPSERT_MANY\n</code-example>\n<h3 id=\"removing-an-entity-from-the-changestate-map\">Removing an entity from the <em>changeState</em> map.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#removing-an-entity-from-the-changestate-map\"><i class=\"material-icons\">link</i></a></h3>\n<p>An entity which has no entry in the <code>ChangeState</code> map is presumed to be unchanged.</p>\n<p>The <em>commit</em> and <em>undo</em> operations remove entries from the <code>ChangeState</code> which means, in effect, that they are \"unchanged.\"</p>\n<p>The <strong>commit</strong> operations simply remove entities from the <code>changeState</code>.\nThey have no other effect on the collection.</p>\n<p>The <a href=\"guide/data/entity-change-tracker#undo\"><strong>undo</strong> operations</a> replace entities in the collection based on\ninformation in the <code>changeState</code> map, reverting them their last known server-side state, and removing them from the <code>changeState</code> map.\nThese entities become \"unchanged.\"</p>\n<p>An entity ceases to be in a changed state when the server returns a new version of the entity.\nOperations that put that entity in the store also remove it from the <code>changeState</code> map.</p>\n<p>Here are the operations that remove one or more specified entities from the <code>changeState</code> map.</p>\n<code-example linenums=\"false\">\nQUERY_BY_KEY_SUCCESS\nQUERY_MANY_SUCCESS\nSAVE_ADD_ONE_SUCCESS\nSAVE_ADD_ONE_OPTIMISTIC_SUCCESS,\nSAVE_DELETE_ONE_SUCCESS\nSAVE_DELETE_ONE_OPTIMISTIC_SUCCESS\nSAVE_UPDATE_ONE_SUCCESS\nSAVE_UPDATE_ONE_OPTIMISTIC_SUCCESS\nCOMMIT_ONE\nCOMMIT_MANY\nUNDO_ONE\nUNDO_MANY\n</code-example>\n<h3 id=\"operations-that-clear-the-changestate-map\">Operations that clear the <em>changeState</em> map.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#operations-that-clear-the-changestate-map\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>EntityOps</code> that replace or remove every entity in the collection also reset the <code>changeState</code> to an empty object.\nAll entities in the collection (if any) become \"unchanged\".</p>\n<code-example linenums=\"false\">\nADD_ALL\nQUERY_ALL_SUCCESS\nREMOVE_ALL\nCOMMIT_ALL\nUNDO_ALL\n</code-example>\n<p>Two of these may surprise you.</p>\n<ol>\n<li>\n<p><code>ADD_ALL</code> is interpreted as a cache load from a known state.\nThese entities are presumed <em>unchanged</em>.\nIf you have a different intent, use <code>ADD_MANY</code>.</p>\n</li>\n<li>\n<p><code>REMOVE_ALL</code> is interpreted as a cache clear with nothing to save. If you have a different intent, use <em>removeMany</em>.</p>\n</li>\n</ol>\n<p>You can (re)set the <code>changeState</code> to anything with <code>EntityOp.SET_CHANGE_STATE</code>.</p>\n<p>This is a super-powerful operation that you should rarely perform.\nIt's most useful if you've created your own entity action and are\nmodifying the collection in some unique way.</p>\n<p><a id=\"undo\"></a></p>\n<h2 id=\"undo-revert-an-unsaved-change\"><em>Undo</em> (revert) an unsaved change<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#undo-revert-an-unsaved-change\"><i class=\"material-icons\">link</i></a></h2>\n<p>You have many options for handling an optimistic save error.\nOne of them is to revert the change to the entity's last known state on the server by dispatching an <em>undo</em> action.</p>\n<p>There are three <em>undo</em> <code>EntityOps</code> that revert entities:\n<code>UNDO_ONE</code>, <code>UNDO_MANY</code> and <code>UNDO_ALL</code>.</p>\n<p>For <code>UNDO_ONE</code> and <code>UNDO_MANY</code>, the id(s) of the entities to revert are in the action payload.</p>\n<p><code>UNDO_ALL</code> reverts every entity in the <code>changeState</code> map.</p>\n<p>Each entity is reverted as follows:</p>\n<ul>\n<li>\n<p><code>ADDED</code> - Remove from the collection and discard</p>\n</li>\n<li>\n<p><code>DELETED</code> - Add the <em>original value</em> of the removed entity to the collection.\nIf the collection is sorted, it will be moved into place.\nIf unsorted, it's added to the end of the collection.</p>\n</li>\n<li>\n<p><code>UPDATED</code> - Update the collection with the entity's <em>original value</em>.</p>\n</li>\n</ul>\n<p>If you try to undo/revert an entity whose id is not in the <code>changeState</code> map, the action is silently ignored.</p>\n<p><a id=\"delete\"></a></p>\n<h3 id=\"deletingremoving-entities\">Deleting/removing entities<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#deletingremoving-entities\"><i class=\"material-icons\">link</i></a></h3>\n<p>There are special change tracking rules for deleting/removing an entity from the collection</p>\n<h4 id=\"added-entities\">Added entities<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#added-entities\"><i class=\"material-icons\">link</i></a></h4>\n<p>When you remove or delete an \"added\" entity, the change tracker removes the entity from the <code>changeState</code> map because there is no server state to which such an entity could be restored.</p>\n<p>The reducer methods that delete and remove entities should immediately remove an <em>added entity</em> from the collection.</p>\n<div class=\"alert is-helpful\">\n<p>The default delete and remove reducer methods remove these entities immediately.</p>\n</div>\n<p>They should not send HTTP DELETE requests to the server because these entities do not exist on the server.</p>\n<div class=\"alert is-helpful\">\n<p>The default <code>EntityEffects.persist$</code> effect does not make HTTP DELETE requests for these entities.</p>\n</div>\n<h4 id=\"updated-entities\">Updated entities<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#updated-entities\"><i class=\"material-icons\">link</i></a></h4>\n<p>An entity registered in the <code>changeState</code> map as \"updated\"\nis reclassified as \"deleted\".\nIts <code>originalValue</code> stays the same.\nUndoing the change will restore the entity to the collection in its pre-update state.</p>\n<p><a id=\"enable-change-tracking\"></a></p>\n<h3 id=\"enabling-and-disabling-change-tracking\">Enabling and disabling change tracking<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-change-tracker#enabling-and-disabling-change-tracking\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can opt-out of change tracking for a collection by setting the collection's <code>enableChangeTracking</code> flag to <code>false</code> in its <code>entityMetadata</code>.\nWhen <code>false</code>, NgRx Data does not track any changes for this collection\nand the <code>EntityCollection.changeState</code> property remains an empty object.</p>\n<p>You can also turnoff change tracking for a specific, cache-only action by choosing one of the\n\"no-tracking\" <code>EntityOps</code>. They all end in <code>_NO_TRACK</code>.</p>\n<code-example linenums=\"false\">\nADD_ONE_NO_TRACK\nADD_MANY_NO_TRACK\nREMOVE_ONE_NO_TRACK\nREMOVE_MANY_NO_TRACK\nUPDATE_ONE_NO_TRACK\nUPDATE_MANY_NO_TRACK\nUPSERT_ONE_NO_TRACK\nUPSERT_MANY_NO_TRACK\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/data/entity-actions\n - guide/data/entity-collection\n-->\n<!-- links from this doc:\n - guide/data/entity-change-tracker#added-entities\n - guide/data/entity-change-tracker#change-tracking\n - guide/data/entity-change-tracker#changestate\n - guide/data/entity-change-tracker#delete\n - guide/data/entity-change-tracker#deletingremoving-entities\n - guide/data/entity-change-tracker#enable-change-tracking\n - guide/data/entity-change-tracker#enabling-and-disabling-change-tracking\n - guide/data/entity-change-tracker#entityactions-and-change-tracking\n - guide/data/entity-change-tracker#entitychangetracker\n - guide/data/entity-change-tracker#operations-that-clear-the-changestate-map\n - guide/data/entity-change-tracker#optimistic-versus-pessimistic-save\n - guide/data/entity-change-tracker#recording-a-change-state\n - guide/data/entity-change-tracker#removing-an-entity-from-the-changestate-map\n - guide/data/entity-change-tracker#save-errors\n - guide/data/entity-change-tracker#undo\n - guide/data/entity-change-tracker#undo-revert-an-unsaved-change\n - guide/data/entity-change-tracker#updated-entities\n - https://github.com//edit/master/NODEJS/ngrx.io/content/guide/data/entity-change-tracker.md?message=docs%3A%20describe%20your%20change...\n-->"
}