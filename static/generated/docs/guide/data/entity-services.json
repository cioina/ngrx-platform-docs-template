{
  "id": "guide/data/entity-services",
  "title": "EntityServices",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com//edit/master/NODEJS/ngrx.io/content/guide/data/entity-services.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"entityservices\">EntityServices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#entityservices\"><i class=\"material-icons\">link</i></a></h1>\n<p><code>EntityServices</code> is a facade over the NgRx Data services and the NgRx Data <code>EntityCache</code>.</p>\n<h2 id=\"registry-of-entitycollectionservices\">Registry of <em>EntityCollectionServices</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#registry-of-entitycollectionservices\"><i class=\"material-icons\">link</i></a></h2>\n<p>It is primarily a registry of <a href=\"guide/data/entity-collection-service\">EntityCollectionServices</a>.</p>\n<p>Call its <code>EntityServices.getEntityCollectionService(entityName)</code> method to get the singleton\n<code>EntityCollectionService</code> for that entity type.</p>\n<p>Here's a component doing that.</p>\n<code-example header=\"heroes-component.ts\">\nimport { EntityCollectionService, EntityServices } from '@ngrx/data';\nimport { Hero } from '../../model';\n\n@Component({...})\nexport class HeroesComponent implements OnInit {\n  heroesService: EntityCollectionService&#x3C;Hero>;\n\n  constructor(entityServices: EntityServices) {\n    this.heroesService = entityServices.getEntityCollectionService('Hero');\n  }\n}\n</code-example>\n<p>If the <code>EntityCollectionService</code> service does not yet exist,\n<code>EntityServices</code> creates a default instance of that service and registers\nthat instance for future reference.</p>\n<h2 id=\"create-a-custom-entitycollectionservice\">Create a custom <em>EntityCollectionService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#create-a-custom-entitycollectionservice\"><i class=\"material-icons\">link</i></a></h2>\n<p>You'll often create custom <code>EntityCollectionService</code> classes with additional capabilities and convenience members,\nas explained in the <a href=\"guide/data/entity-collection-service\">EntityCollectionService</a> doc.</p>\n<p>Here's an example.</p>\n<code-example header=\"heroes.service.ts\">\nimport { Injectable } from '@angular/core';\nimport { EntityCollectionServiceBase, EntityCollectionServiceElementsFactory } from '@ngrx/data';\n\nimport { Hero } from '../model';\n\n@Injectable()\nexport class HeroesService extends EntityCollectionServiceBase&#x3C;Hero> {\n  constructor(elementsFactory: EntityCollectionServiceElementsFactory) {\n    super('Hero', elementsFactory);\n  }\n\n  // ... your special sauce here\n}\n</code-example>\n<p>Of course you must provide the custom service before you use it, typically in an Angular <code>NgModule</code>.</p>\n<code-example header=\"heroes.module.ts\">\n...\nimport { HeroesService } from './heroes.service';\n\n@NgModule({\n  imports: [...],\n  declarations: [...],\n  providers: [HeroesService]\n})\nexport class HeroesModule {}\n</code-example>\n<p>The following alternative example uses the <strong>preferred \"tree-shakable\" <code>Injectable()</code></strong>\nto provide the service in the root module.</p>\n<code-example language=\"javascript\">\n@Injectable({ providedIn: 'root' })\nexport class HeroesService extends EntityCollectionServiceBase&#x3C;Hero> {\n  ...\n}\n</code-example>\n<p>You can inject that custom service directly into the component.</p>\n<code-example header=\"heroes.component.ts (v2)\">\n@Component({...})\nexport class HeroesComponent {\n  heroes$: Observable&#x3C;Hero[]>;\n  loading$: Observable&#x3C;boolean>;\n\n  constructor(public heroesService: HeroesService) {\n    this.heroes$ = this.heroesService.entities$;\n    this.loading$ = this.heroesService.loading$;\n  }\n  ...\n}\n</code-example>\n<p>Nothing new so far.\nBut we want to be able to get the <code>HeroesService</code> from <code>EntityServices.getEntityCollectionService()</code>\njust as we get the default collection services.</p>\n<p>This consistency will pay off when the app has a lot of collection services</p>\n<h2 id=\"register-the-custom-entitycollectionservice\">Register the custom <em>EntityCollectionService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#register-the-custom-entitycollectionservice\"><i class=\"material-icons\">link</i></a></h2>\n<p>When you register an instance of a custom <code>EntityCollectionService</code> with <code>EntityServices</code>, other callers of\n<code>EntityServices.getEntityCollectionService()</code> get that custom service instance.</p>\n<p>You'll want to do that before anything tries to acquire it via the <code>EntityServices</code>.</p>\n<p>One solution is to inject custom collection services in the constructor of the module that provides them,\nand register them there.</p>\n<p>The following example demonstrates.</p>\n<code-example header=\"app.module.ts\">\n@NgModule({ ... })\nexport class AppModule {\n  // Inject the service to ensure it registers with EntityServices\n  constructor(\n    entityServices: EntityServices,\n    // custom collection services\n    hs: HeroesService,\n    vs: VillainsService\n    ){\n    entityServices.registerEntityCollectionServices([hs, vs]);\n  }\n}\n</code-example>\n<h2 id=\"sub-class-entityservices-for-application-class-convenience\">Sub-class <em>EntityServices</em> for application class convenience<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#sub-class-entityservices-for-application-class-convenience\"><i class=\"material-icons\">link</i></a></h2>\n<p>Another useful solution is to create a sub-class of <code>EntityServices</code>\nthat both injects the custom collection services\nand adds convenience members for your application.</p>\n<p>The following <code>AppEntityServices</code> demonstrates.</p>\n<code-example header=\"app-entity-services.ts\">\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  EntityCache,\n  EntityCollectionServiceFactory,\n  EntityServicesBase\n} from '@ngrx/data';\n\nimport { SideKick } from '../../model';\nimport { HeroService, VillainService } from '../../services';\n\n@Injectable()\nexport class AppEntityServices extends EntityServicesBase {\n  constructor(\n    public readonly store: Store&#x3C;EntityCache>,\n    public readonly entityCollectionServiceFactory: EntityCollectionServiceFactory,\n\n    // Inject custom services, register them with the EntityServices, and expose in API.\n    public readonly heroesService: HeroesService,\n    public readonly villainsService: VillainsService\n  ) {\n    super(store, entityCollectionServiceFactory);\n    this.registerEntityCollectionServices([heroesService, villainsService]);\n  }\n\n  // ... Additional convenience members\n\n  /** get the (default) SideKicks service */\n  get sideKicksService() {\n    return this.getEntityCollectionService&#x3C;SideKick>('SideKick');\n  }\n}\n</code-example>\n<p><code>AppEntityServices</code> injects the two custom collection services, <code>HeroesService</code> and <code>VillainsService</code>,\nwhich it also exposes directly as convenience properties.</p>\n<p>There is no custom collections service for the <code>SideKick</code>.\nThe default service will do.</p>\n<p>Nonetheless, we add a <code>sideKicksService</code> property that gets or creates a default service for <code>SideKick</code>.\nConsumers will find this more discoverable and easier to call than <code>getEntityCollectionService()</code>.</p>\n<p>Of course the base class <code>EntityServices</code> members, such as <code>getEntityCollectionService()</code>, <code>entityCache$</code>,\nand <code>registerEntityCollectionService()</code> are all available.</p>\n<p>Next, provide <code>AppEntityServices</code> in an Angular <code>NgModule</code> both as itself (<code>AppEntityServices</code>)\nand as an alias for <code>EntityServices</code>.</p>\n<p>In this manner, an application class references this same <code>AppEntityServices</code> service instance,\nwhether it injects <code>AppEntityServices</code> or <code>EntityServices</code>.</p>\n<p>See it here in the sample app.</p>\n<code-example header=\"store/entity/entity-module\">\n@NgModule({\n  imports: [ ... ],\n  providers: [\n    AppEntityServices,\n    { provide: EntityServices, useExisting: AppEntityServices },\n    ...\n  ]\n})\nexport class EntityStoreModule { ... }\n</code-example>\n<h2 id=\"access-multiple-entitycollectionservices\">Access multiple <em>EntityCollectionServices</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#access-multiple-entitycollectionservices\"><i class=\"material-icons\">link</i></a></h2>\n<p>A complex component may need access to multiple entity collections.\nThe <code>EntityServices</code> registry makes this easy,\neven when the <code>EntityCollectionServices</code> are customized for each entity type.</p>\n<p>You'll only need <strong>a single injected constructor parameter</strong>, the <code>EntityServices</code>.</p>\n<code-example header=\"character-container.component.ts\">\nimport { EntityCollectionService, EntityServices } from '@ngrx/data';\nimport { SideKick } from '../../model';\nimport { HeroService, VillainService } from '../../services';\n\n@Component({...})\nexport class CharacterContainerComponent implements OnInit {\n  heroesService: HeroService;\n  sideKicksService: EntityCollectionService&#x3C;SideKick>;\n  villainService: VillainService;\n\n  heroes$: Observable&#x3C;Hero>;\n  ...\n  constructor(entityServices: EntityServices) {\n    this.heroesService = entityServices.getEntityCollectionService('Hero');\n    this.sidekicksService = entityServices.getEntityCollectionService('SideKick');\n    this.villainService = entityServices.getEntityCollectionService('Villain');\n\n    this.heroes$ = this.heroesService.entities$;\n    ...\n  }\n  ...\n}\n</code-example>\n<p>An application-specific sub-class of <code>EntityServices</code>, such as the <code>AppEntityServices</code> above,\nmakes this a little nicer.</p>\n<code-example header=\"character-container.component.ts (with AppEntityServices)\">\nimport { AppEntityServices } from '../../services';\n\n@Component({...})\nexport class CharacterContainerComponent implements OnInit {\n\n  heroes$: Observable&#x3C;Hero>;\n  ...\n  constructor(private appEntityServices: AppEntityServices) {\n    this.heroes$ = appEntityServices.heroesService.entities$;\n    ...\n  }\n  ...\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/data/architecture-overview\n - guide/data/entity-actions\n-->\n<!-- links from this doc:\n - guide/data/entity-collection-service\n - guide/data/entity-services#access-multiple-entitycollectionservices\n - guide/data/entity-services#create-a-custom-entitycollectionservice\n - guide/data/entity-services#entityservices\n - guide/data/entity-services#register-the-custom-entitycollectionservice\n - guide/data/entity-services#registry-of-entitycollectionservices\n - guide/data/entity-services#sub-class-entityservices-for-application-class-convenience\n - https://github.com//edit/master/NODEJS/ngrx.io/content/guide/data/entity-services.md?message=docs%3A%20describe%20your%20change...\n-->"
}