{
  "id": "guide/store/recipes/injecting",
  "title": "Using Dependency Injection",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com//edit/master/NODEJS/ngrx.io/content/guide/store/recipes/injecting.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"using-dependency-injection\">Using Dependency Injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/injecting#using-dependency-injection\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"injecting-reducers\">Injecting Reducers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/injecting#injecting-reducers\"><i class=\"material-icons\">link</i></a></h2>\n<p>To inject the root reducers into your application, use an <code>InjectionToken</code> and a <code>Provider</code> to register the reducers through dependency injection.</p>\n<code-example header=\"app.module.ts\">\nimport { NgModule, InjectionToken } from '@angular/core';\nimport { StoreModule, ActionReducerMap } from '@ngrx/store';\n\nimport { SomeService } from './some.service';\nimport * as fromRoot from './reducers';\n\nexport const REDUCER_TOKEN = new InjectionToken&#x3C;ActionReducerMap&#x3C;fromRoot.State>>('Registered Reducers', {\n  factory: () => {\n    const serv = inject(SomeService);\n    // return reducers synchronously\n    return serv.getReducers();\n  }\n});\n\n@NgModule({\n  imports: [StoreModule.forRoot(REDUCER_TOKEN)]\n})\nexport class AppModule {}\n</code-example>\n<p>Reducers are also injected when composing state through feature modules.</p>\n<code-example header=\"feature.module.ts\">\nimport { NgModule, InjectionToken } from '@angular/core';\nimport { StoreModule, ActionReducerMap } from '@ngrx/store';\n\nimport * as fromFeature from './reducers';\n\nexport const FEATURE_REDUCER_TOKEN = new InjectionToken&#x3C;\n  ActionReducerMap&#x3C;fromFeature.State>\n>('Feature Reducers');\n\nexport function getReducers(): ActionReducerMap&#x3C;fromFeature.State> {\n  // map of reducers\n  return {};\n}\n\n@NgModule({\n  imports: [StoreModule.forFeature(fromFeature.featureKey, FEATURE_REDUCER_TOKEN)],\n  providers: [\n    {\n      provide: FEATURE_REDUCER_TOKEN,\n      useFactory: getReducers,\n    },\n  ],\n})\nexport class FeatureModule {}\n</code-example>\n<h2 id=\"injecting-meta-reducers\">Injecting Meta-Reducers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/injecting#injecting-meta-reducers\"><i class=\"material-icons\">link</i></a></h2>\n<p>To inject 'middleware' meta reducers, use the <code>META_REDUCERS</code> injection token exported in\nthe Store API and a <code>Provider</code> to register the meta reducers through dependency\ninjection.</p>\n<code-example header=\"app.module.ts\">\nimport { MetaReducer, META_REDUCERS } from '@ngrx/store';\nimport { SomeService } from './some.service';\nimport * as fromRoot from './reducers';\n\nexport function getMetaReducers(\n  some: SomeService\n): MetaReducer&#x3C;fromRoot.State>[] {\n  // return array of meta reducers;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: META_REDUCERS,\n      deps: [SomeService],\n      useFactory: getMetaReducers,\n      multi: true,\n    },\n  ],\n})\nexport class AppModule {}\n</code-example>\n<div class=\"alert is-important\">\n<p>Careful attention should be called to the use of the <code>multi</code>\nproperty in the provider here for <code>META_REDUCERS</code>. As this injection token may be utilized\nby many libraries concurrently, specifying <code>multi: true</code> is critical to ensuring that all\nlibrary meta reducers are applied to any project that consumes multiple NgRx libraries with\nregistered meta reducers.</p>\n</div>\n<h2 id=\"injecting-feature-config\">Injecting Feature Config<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/recipes/injecting#injecting-feature-config\"><i class=\"material-icons\">link</i></a></h2>\n<p>To inject the feature store configuration into your module, use an <code>InjectionToken</code> and a <code>Provider</code> to register the feature config object through dependency injection.</p>\n<code-example header=\"feature.module.ts\">\nimport { NgModule, InjectionToken } from '@angular/core';\nimport { StoreModule, StoreConfig } from '@ngrx/store';\nimport { SomeService } from './some.service';\n\nimport * as fromFeature from './reducers';\n\nexport const FEATURE_CONFIG_TOKEN = new InjectionToken&#x3C;StoreConfig&#x3C;fromFeature.State>>('Feature Config');\n\nexport function getConfig(someService: SomeService): StoreConfig&#x3C;fromFeature.State> {\n  // return the config synchronously.\n  return {\n    initialState: someService.getInitialState(),\n\n    metaReducers: [\n      fromFeature.loggerFactory(someService.loggerConfig())\n    ]\n  };\n}\n\n@NgModule({\n  imports: [StoreModule.forFeature(fromFeature.featureKey, fromFeature.reducers, FEATURE_CONFIG_TOKEN)],\n  providers: [\n    {\n      provide: FEATURE_CONFIG_TOKEN,\n      deps: [SomeService],\n      useFactory: getConfig,\n    },\n  ],\n})\nexport class FeatureModule {}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - guide/store/recipes/injecting#injecting-feature-config\n - guide/store/recipes/injecting#injecting-meta-reducers\n - guide/store/recipes/injecting#injecting-reducers\n - guide/store/recipes/injecting#using-dependency-injection\n - https://github.com//edit/master/NODEJS/ngrx.io/content/guide/store/recipes/injecting.md?message=docs%3A%20describe%20your%20change...\n-->"
}