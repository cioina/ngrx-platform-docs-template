{
  "id": "guide/store/configuration/runtime-checks",
  "title": "Runtime checks",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/NODEJS/ngrx.io/content/guide/store/configuration/runtime-checks.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"runtime-checks\">Runtime checks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/configuration/runtime-checks#runtime-checks\"><i class=\"material-icons\">link</i></a></h1>\n<p>Runtime checks are here to guide developers to follow the NgRx and Redux core concepts and best practices. They are here to shorten the feedback loop of easy-to-make mistakes when you're starting to use NgRx, or even a well-seasoned developer might make. During development, when a rule is violated, an error is thrown notifying you what and where something went wrong.</p>\n<p><code>@ngrx/store</code> ships with six (6) built-in runtime checks:</p>\n<ul>\n<li>Default On:\n<ul>\n<li><a href=\"guide/store/configuration/runtime-checks#strictstateimmutability\"><code>strictStateImmutability</code></a>: verifies that the state isn't mutated.</li>\n<li><a href=\"guide/store/configuration/runtime-checks#strictactionimmutability\"><code>strictActionImmutability</code></a>: verifies that actions aren't mutated</li>\n</ul>\n</li>\n<li>Default Off:\n<ul>\n<li><a href=\"guide/store/configuration/runtime-checks#strictstateserializability\"><code>strictStateSerializability</code></a>: verifies if the state is serializable</li>\n<li><a href=\"guide/store/configuration/runtime-checks#strictactionserializability\"><code>strictActionSerializability</code></a>: verifies if the actions are serializable</li>\n<li><a href=\"guide/store/configuration/runtime-checks#strictactionwithinngzone\"><code>strictActionWithinNgZone</code></a>: verifies if actions are dispatched within NgZone</li>\n<li><a href=\"guide/store/configuration/runtime-checks#strictactiontypeuniqueness\"><code>strictActionTypeUniqueness</code></a>: verifies if registered action types are unique</li>\n</ul>\n</li>\n</ul>\n<p>All checks will automatically be disabled in production builds.</p>\n<h2 id=\"configuring-runtime-checks\">Configuring runtime checks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/configuration/runtime-checks#configuring-runtime-checks\"><i class=\"material-icons\">link</i></a></h2>\n<p>It's possible to override the default configuration of runtime checks. To do so, use the <code>runtimeChecks</code> property on the root store's config object. For each runtime check you can toggle the check with a <code>boolean</code>, <code>true</code> to enable the check, <code>false</code> to disable the check.</p>\n<code-example language=\"ts\">\n@NgModule({\n  imports: [\n    StoreModule.forRoot(reducers, {\n      runtimeChecks: {\n        strictStateImmutability: true,\n        strictActionImmutability: true,\n        strictStateSerializability: true,\n        strictActionSerializability: true,\n        strictActionWithinNgZone: true,\n        strictActionTypeUniqueness: true,\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n</code-example>\n<div class=\"alert is-important\">\n<p>The serializability runtime checks cannot be enabled if you use <code>@ngrx/router-store</code> with the <code>DefaultRouterStateSerializer</code>. The <a href=\"guide/router-store/configuration\">default serializer</a> has an unserializable router state and actions that are not serializable. To use the serializability runtime checks either use the <code>MinimalRouterStateSerializer</code> or implement a custom router state serializer.\nThis also applies to Ivy with immutability runtime checks.</p>\n</div>\n<h3 id=\"strictstateimmutability\">strictStateImmutability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/configuration/runtime-checks#strictstateimmutability\"><i class=\"material-icons\">link</i></a></h3>\n<p>The number one rule of NgRx, immutability. This <code>strictStateImmutability</code> check verifies if a developer tries to modify the state object. This check is important to be able to work with the state in a predictable way, it should always be possible to recreate the state.</p>\n<p>Example violation of the rule:</p>\n<code-example language=\"ts\">\nexport const reducer = createReducer(initialState,\n  on(addTodo, (state, { todo }) => ({\n    // Violation 1: we assign a new value to `todoInput` directly\n    state.todoInput = '',\n    // Violation 2: `push` modifies the array\n    state.todos.push(todo)\n  }))\n);\n</code-example>\n<p>To fix the above violation, a new reference to the state has to be created:</p>\n<code-example language=\"ts\">\nexport const reducer = createReducer(\n  initialState,\n  on(addTodo, (state, { todo }) => ({\n    ...state,\n    todoInput: '',\n    todos: [...state.todos, todo],\n  }))\n);\n</code-example>\n<h3 id=\"strictactionimmutability\">strictActionImmutability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/configuration/runtime-checks#strictactionimmutability\"><i class=\"material-icons\">link</i></a></h3>\n<p>Uses the same check as <code>strictStateImmutability</code>, but for actions. An action should not be modified.</p>\n<p>Example violation of the rule:</p>\n<code-example language=\"ts\">\nexport const reducer = createReducer(initialState,\n  on(addTodo, (state, { todo }) => ({\n    // Violation, it's not allowed to modify an action\n    todo.id = generateUniqueId();\n    return {\n      ...state,\n      todos: [...state.todos, todo]\n    }\n  }))\n);\n</code-example>\n<p>To fix the above violation, the todo's id should be set in the action creator or should be set in an immutable way. That way we can simply append the todo to the current <code>todos</code>:</p>\n<code-example language=\"ts\">\nexport const addTodo = createAction(\n  '[Todo List] Add Todo',\n  (description: string) => ({ id: generateUniqueId(), description })\n);\nexport const reducer = createReducer(\n  initialState,\n  on(addTodo, (state, { todo }) => ({\n    ...state,\n    todos: [...state.todos, todo],\n  }))\n);\n</code-example>\n<h3 id=\"strictstateserializability\">strictStateSerializability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/configuration/runtime-checks#strictstateserializability\"><i class=\"material-icons\">link</i></a></h3>\n<p>This check verifies if the state is serializable. A serializable state is important to be able to persist the current state to be able to rehydrate the state in the future.</p>\n<p>Example violation of the rule:</p>\n<code-example language=\"ts\">\nexport const reducer = createReducer(\n  initialState,\n  on(completeTodo, (state, { id }) => ({\n    ...state,\n    todos: {\n      ...state.todos,\n      [id]: {\n        ...state.todos[id],\n        // Violation, Date is not serializable\n        completedOn: new Date(),\n      },\n    },\n  }))\n);\n</code-example>\n<p>As a fix of the above violation the <code>Date</code> object must be made serializable:</p>\n<code-example language=\"ts\">\nexport const reducer = createReducer(\n  initialState,\n  on(completeTodo, (state, { id }) => ({\n    ...state,\n    todos: {\n      ...state.todos,\n      [id]: {\n        ...state.todos[id],\n        completedOn: new Date().toJSON(),\n      },\n    },\n  }))\n);\n</code-example>\n<h3 id=\"strictactionserializability\">strictActionSerializability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/configuration/runtime-checks#strictactionserializability\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>strictActionSerializability</code> check resembles <code>strictStateSerializability</code> but as the name says, it verifies if the action is serializable. An action must be serializable to be replayed, this can be helpful during development while using the Redux DevTools and in production to be able to debug errors.</p>\n<p>Example violation of the rule:</p>\n<code-example language=\"ts\">\nconst createTodo = createAction('[Todo List] Add new todo', todo => ({\n  todo,\n  // Violation, a function is not serializable\n  logTodo: () => {\n    console.log(todo);\n  },\n}));\n</code-example>\n<p>The fix for this violation is to not add functions on actions, as a replacement a function can be created:</p>\n<code-example language=\"ts\">\nconst createTodo = createAction(\n  '[Todo List] Add new todo',\n  props&#x3C;{ todo: Todo }>()\n);\n\nfunction logTodo(todo: Todo) {\n  console.log(todo);\n}\n</code-example>\n<div class=\"alert is-important\">\n<p>Please note, you may not need to set <code>strictActionSerializability</code> to <code>true</code> unless you are storing/replaying actions using external resources, for example <code>localStorage</code>.</p>\n</div>\n<h3 id=\"strictactionwithinngzone\">strictActionWithinNgZone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/configuration/runtime-checks#strictactionwithinngzone\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>strictActionWithinNgZone</code> check verifies that Actions are dispatched by asynchronous tasks running within <code>NgZone</code>. Actions dispatched by tasks, running outside of <code>NgZone</code>, will not trigger ChangeDetection upon completion and may result in a stale view.</p>\n<p>Example violation of the rule:</p>\n<code-example language=\"ts\">\n// Callback running outside of NgZone\nfunction callbackOutsideNgZone() {\n  this.store.dispatch(clearTodos());\n}\n</code-example>\n<p>To fix ensure actions are running within <code>NgZone</code>. Identify the event trigger and then verify if the code can be updated to use a <code>NgZone</code> aware feature. If this is not possible use the <code>NgZone.run</code> method to explicitly run the asynchronous task within NgZone.</p>\n<code-example language=\"ts\">\nimport { NgZone } from '@angular/core';\n\nconstructor(private ngZone: NgZone){}\n\n// Callback running outside of NgZone brought back in NgZone.\nfunction callbackOutsideNgZone(){\n  this.ngZone.run(() => {\n    this.store.dispatch(clearTodos());\n  }\n}\n</code-example>\n<h2 id=\"strictactiontypeuniqueness\">strictActionTypeUniqueness<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/configuration/runtime-checks#strictactiontypeuniqueness\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>strictActionTypeUniqueness</code> guards you against registering the same action type more than once.</p>\n<p>Example violation of the rule:</p>\n<code-example language=\"ts\">\nexport const customerPageLoaded = createAction('[Customers Page] Loaded');\nexport const customerPageRefreshed = createAction('[Customers Page] Loaded');\n</code-example>\n<p>The fix of the violation is to create unique action types:</p>\n<code-example language=\"ts\">\nexport const customerPageLoaded = createAction('[Customers Page] Loaded');\nexport const customerPageRefreshed = createAction('[Customers Page] Refreshed');\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/router-store/configuration\n-->\n<!-- links from this doc:\n - guide/router-store/configuration\n - guide/store/configuration/runtime-checks#configuring-runtime-checks\n - guide/store/configuration/runtime-checks#runtime-checks\n - guide/store/configuration/runtime-checks#strictactionimmutability\n - guide/store/configuration/runtime-checks#strictactionserializability\n - guide/store/configuration/runtime-checks#strictactiontypeuniqueness\n - guide/store/configuration/runtime-checks#strictactionwithinngzone\n - guide/store/configuration/runtime-checks#strictstateimmutability\n - guide/store/configuration/runtime-checks#strictstateserializability\n - https://github.com/ngrx/platform/edit/master/NODEJS/ngrx.io/content/guide/store/configuration/runtime-checks.md?message=docs%3A%20describe%20your%20change...\n-->"
}