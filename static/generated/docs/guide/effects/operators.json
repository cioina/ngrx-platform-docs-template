{
  "id": "guide/effects/operators",
  "title": "Effects operators",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com//edit/master/NODEJS/ngrx.io/content/guide/effects/operators.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"effects-operators\">Effects operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/operators#effects-operators\"><i class=\"material-icons\">link</i></a></h1>\n<p>As part of the <code>Effects</code> library, NgRx provides some useful operators that are frequently\nused. </p>\n<h2 id=\"oftype\"><code>ofType</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/operators#oftype\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>ofType</code> operator filters the stream of actions based on either string\nvalues (that represent <code>type</code>s of actions) or Action Creators.</p>\n<p>The generic for the <code>Actions&#x3C;TypeUnion></code> must be provided in order for type\ninference to work properly with string values. Action Creators that are based on\n<code>createAction</code> function do not have the same limitation.</p>\n<p>The <code>ofType</code> operator takes up to 5 arguments with proper type inference. It can\ntake even more, however the type would be inferred as an <code>Action</code> interface.</p>\n<code-example header=\"auth.effects.ts\">\nimport { Injectable } from '@angular/core';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport {\n  LoginPageActions,\n  AuthApiActions,\n} from '../actions';\nimport { Credentials } from '../models/user';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthEffects {\n  login$ = createEffect(() =>\n    this.actions$.pipe(\n      // Filters by Action Creator 'login'\n      ofType(LoginPageActions.login),\n      exhaustMap(action =>\n        this.authService.login(action.credentials).pipe(\n          map(user => AuthApiActions.loginSuccess({ user })),\n          catchError(error => of(AuthApiActions.loginFailure({ error })))\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private authService: AuthService\n  ) {}\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/effects\n-->\n<!-- links from this doc:\n - guide/effects/operators#effects-operators\n - guide/effects/operators#oftype\n - https://github.com//edit/master/NODEJS/ngrx.io/content/guide/effects/operators.md?message=docs%3A%20describe%20your%20change...\n-->"
}